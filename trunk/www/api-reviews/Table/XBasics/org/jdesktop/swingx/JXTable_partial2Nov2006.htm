<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.5.0_03) on Thu Nov 02 05:08:26 CST 2006 -->
<TITLE>
JXTable
</TITLE>

<META NAME="keywords" CONTENT="org.jdesktop.swingx.JXTable class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="JXTable";
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">

org.jdesktop.swingx</FONT>
<BR>
Class JXTable</H2>
<PRE>
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Component.html" title="class or interface in java.awt">java.awt.Component</A>
      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Container.html" title="class or interface in java.awt">java.awt.Container</A>
          <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComponent.html" title="class or interface in javax.swing">javax.swing.JComponent</A>

              <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">javax.swing.JTable</A>
                  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>org.jdesktop.swingx.JXTable</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/image/ImageObserver.html" title="class or interface in java.awt.image">ImageObserver</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/MenuContainer.html" title="class or interface in java.awt">MenuContainer</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html" title="class or interface in java.io">Serializable</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/util/EventListener.html" title="class or interface in java.util">EventListener</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/accessibility/Accessible.html" title="class or interface in javax.accessibility">Accessible</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/CellEditorListener.html" title="class or interface in javax.swing.event">CellEditorListener</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/ListSelectionListener.html" title="class or interface in javax.swing.event">ListSelectionListener</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html" title="class or interface in javax.swing.event">TableColumnModelListener</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableModelListener.html" title="class or interface in javax.swing.event">TableModelListener</A>, <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/Scrollable.html" title="class or interface in javax.swing">Scrollable</A></DD>

</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../org/jdesktop/swingx/JXTreeTable.html" title="class in org.jdesktop.swingx">JXTreeTable</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>JXTable</B><DT>extends <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></DL>
</PRE>

<P>
<hr>
<p>
This is a partial copy of <a href="http://www.javadesktop.org/swinglabs/build/weekly/latest/swingx-HEAD/javadoc/org/jdesktop/swingx/JXTable.html">JXTable javadoc</a>. 
The focus is on stand-alone table fields/methods (their details section), that is those which are unreleated to
cross-component themes. All summaries and unrelated field/method details are cut.

</p><div style="margin-left: 40px;">Note: links inside this document are
working, while links to other documents might not. 

</div><p>

&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="HORIZONTALSCROLL_ACTION_COMMAND"><!-- --></A><H3>

HORIZONTALSCROLL_ACTION_COMMAND</H3>
<PRE>
public static final <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html" title="class or interface in java.lang">String</A> <B>HORIZONTALSCROLL_ACTION_COMMAND</B></PRE>
<DL>
<DD>Identifier of show horizontal scroll action, 
 used in JXTable's <code>ActionMap</code>.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#org.jdesktop.swingx.JXTable.HORIZONTALSCROLL_ACTION_COMMAND">Constant Field Values</A></DL>

</DL>
<HR>

<A NAME="PACKALL_ACTION_COMMAND"><!-- --></A><H3>
PACKALL_ACTION_COMMAND</H3>
<PRE>
public static final <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html" title="class or interface in java.lang">String</A> <B>PACKALL_ACTION_COMMAND</B></PRE>
<DL>
<DD>Identifier of pack table action, used in JXTable's <code>ActionMap</code>.
<P>

<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#org.jdesktop.swingx.JXTable.PACKALL_ACTION_COMMAND">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="PACKSELECTED_ACTION_COMMAND"><!-- --></A><H3>
PACKSELECTED_ACTION_COMMAND</H3>
<PRE>
public static final <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html" title="class or interface in java.lang">String</A> <B>PACKSELECTED_ACTION_COMMAND</B></PRE>
<DL>

<DD>Identifier of pack selected column action, used in JXTable's <code>ActionMap</code>.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#org.jdesktop.swingx.JXTable.PACKSELECTED_ACTION_COMMAND">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="UIPREFIX"><!-- --></A><H3>
UIPREFIX</H3>
<PRE>
public static final <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html" title="class or interface in java.lang">String</A> <B>UIPREFIX</B></PRE>

<DL>
<DD>The prefix marker to find table related properties 
 in the <code>ResourceBundle</code>.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#org.jdesktop.swingx.JXTable.UIPREFIX">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="MATCH_HIGHLIGHTER"><!-- --></A><H3>
MATCH_HIGHLIGHTER</H3>
<PRE>
public static final <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html" title="class or interface in java.lang">String</A> <B>MATCH_HIGHLIGHTER</B></PRE>

<DL>
<DD>key for client property to use SearchHighlighter as match marker.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#org.jdesktop.swingx.JXTable.MATCH_HIGHLIGHTER">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="filters"><!-- --></A><H3>
filters</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/FilterPipeline.html" title="class in org.jdesktop.swingx.decorator">FilterPipeline</A> <B>filters</B></PRE>

<DL>
<DD>The FilterPipeline for the table.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="highlighters"><!-- --></A><H3>
highlighters</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/HighlighterPipeline.html" title="class in org.jdesktop.swingx.decorator">HighlighterPipeline</A> <B>highlighters</B></PRE>

<DL>
<DD>The HighlighterPipeline for the table.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="resetDefaultTableCellRendererHighlighter"><!-- --></A><H3>
resetDefaultTableCellRendererHighlighter</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/Highlighter.html" title="class in org.jdesktop.swingx.decorator">Highlighter</A> <B>resetDefaultTableCellRendererHighlighter</B></PRE>

<DL>
<DD>The Highlighter used to hack around DefaultTableCellRenderer's color memory.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="dataAdapter"><!-- --></A><H3>
dataAdapter</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/ComponentAdapter.html" title="class in org.jdesktop.swingx.decorator">ComponentAdapter</A> <B>dataAdapter</B></PRE>

<DL>
<DD>The ComponentAdapter for model data access.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="isXTableRowHeightSet"><!-- --></A><H3>
isXTableRowHeightSet</H3>
<PRE>
protected boolean <B>isXTableRowHeightSet</B></PRE>
<DL>
<DD>Flag to distinguish internal settings of rowheight from client code
 settings. The rowHeight will be internally adjusted to font size on
 instantiation and in updateUI if the height has not been set explicitly
 by the application.

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#adminSetRowHeight(int)"><CODE>adminSetRowHeight(int)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#setRowHeight(int)"><CODE>setRowHeight(int)</CODE></A></DL>
</DL>
<HR>

<A NAME="searchable"><!-- --></A><H3>
searchable</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/Searchable.html" title="interface in org.jdesktop.swingx">Searchable</A> <B>searchable</B></PRE>

<DL>
<DD>property to control search behaviour.
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="JXTable()"><!-- --></A><H3>
JXTable</H3>
<PRE>
public <B>JXTable</B>()</PRE>
<DL>
<DD>Instantiates a JXTable with a default table model, no data.
<P>
</DL>
<HR>

<A NAME="JXTable(javax.swing.table.TableModel)"><!-- --></A><H3>
JXTable</H3>

<PRE>
public <B>JXTable</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableModel.html" title="class or interface in javax.swing.table">TableModel</A>&nbsp;dm)</PRE>
<DL>
<DD>Instantiates a JXTable with a specific table model.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>dm</CODE> - The model to use.</DL>
</DL>

<HR>

<A NAME="JXTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel)"><!-- --></A><H3>
JXTable</H3>
<PRE>
public <B>JXTable</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableModel.html" title="class or interface in javax.swing.table">TableModel</A>&nbsp;dm,
               <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumnModel.html" title="class or interface in javax.swing.table">TableColumnModel</A>&nbsp;cm)</PRE>
<DL>
<DD>Instantiates a JXTable with a specific table model.
<P>

<DL>
<DT><B>Parameters:</B><DD><CODE>dm</CODE> - The model to use.</DL>
</DL>
<HR>

<A NAME="JXTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel, javax.swing.ListSelectionModel)"><!-- --></A><H3>
JXTable</H3>
<PRE>
public <B>JXTable</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableModel.html" title="class or interface in javax.swing.table">TableModel</A>&nbsp;dm,
               <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumnModel.html" title="class or interface in javax.swing.table">TableColumnModel</A>&nbsp;cm,
               <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/ListSelectionModel.html" title="class or interface in javax.swing">ListSelectionModel</A>&nbsp;sm)</PRE>

<DL>
<DD>Instantiates a JXTable with a specific table model, column model, and
 selection model.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>dm</CODE> - The table model to use.<DD><CODE>cm</CODE> - The colomn model to use.<DD><CODE>sm</CODE> - The list selection model to use.</DL>
</DL>
<HR>

<A NAME="JXTable(int, int)"><!-- --></A><H3>
JXTable</H3>
<PRE>
public <B>JXTable</B>(int&nbsp;numRows,
               int&nbsp;numColumns)</PRE>
<DL>
<DD>Instantiates a JXTable for a given number of columns and rows.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>numRows</CODE> - Count of rows to accomodate.<DD><CODE>numColumns</CODE> - Count of columns to accomodate.</DL>

</DL>
<HR>

<A NAME="JXTable(java.util.Vector, java.util.Vector)"><!-- --></A><H3>
JXTable</H3>
<PRE>
public <B>JXTable</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Vector.html" title="class or interface in java.util">Vector</A>&nbsp;rowData,
               <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Vector.html" title="class or interface in java.util">Vector</A>&nbsp;columnNames)</PRE>
<DL>
<DD>Instantiates a JXTable with data in a vector or rows and column names.

<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>rowData</CODE> - Row data, as a Vector of Objects.<DD><CODE>columnNames</CODE> - Column names, as a Vector of Strings.</DL>
</DL>
<HR>

<A NAME="JXTable(java.lang.Object[][], java.lang.Object[])"><!-- --></A><H3>
JXTable</H3>
<PRE>

public <B>JXTable</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>[][]&nbsp;rowData,
               <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>[]&nbsp;columnNames)</PRE>
<DL>
<DD>Instantiates a JXTable with data in a array or rows and column names.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>rowData</CODE> - Row data, as a two-dimensional Array of Objects (by row,
        for column).<DD><CODE>columnNames</CODE> - Column names, as a Array of Strings.</DL>

</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setRolloverEnabled(boolean)"><!-- --></A><H3>
setRolloverEnabled</H3>
<PRE>

public void <B>setRolloverEnabled</B>(boolean&nbsp;rolloverEnabled)</PRE>
<DL>
<DD>Property to enable/disable rollover support. This can be enabled to show
 "live" rollover behaviour, f.i. the cursor over LinkModel cells. Default
 is enabled. If rollover effects are not used, this property should be 
 disabled.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rolloverEnabled</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="getLinkController()"><!-- --></A><H3>
getLinkController</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/JXTable.TableRolloverController.html" title="class in org.jdesktop.swingx">JXTable.TableRolloverController</A> <B>getLinkController</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="createLinkController()"><!-- --></A><H3>
createLinkController</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/JXTable.TableRolloverController.html" title="class in org.jdesktop.swingx">JXTable.TableRolloverController</A> <B>createLinkController</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="createRolloverProducer()"><!-- --></A><H3>
createRolloverProducer</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/RolloverProducer.html" title="class in org.jdesktop.swingx">RolloverProducer</A> <B>createRolloverProducer</B>()</PRE>
<DL>
<DD>creates and returns the RolloverProducer to use.
<P>
<DD><DL>

<DT><B>Returns:</B><DD><code>RolloverProducer</code></DL>

</DD>
</DL>
<HR>

<A NAME="isRolloverEnabled()"><!-- --></A><H3>
isRolloverEnabled</H3>
<PRE>
public boolean <B>isRolloverEnabled</B>()</PRE>
<DL>
<DD>Returns the rolloverEnabled property.
<P>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if rollover is enabled</DL>
</DD>
</DL>
<HR>

<A NAME="isColumnControlVisible()"><!-- --></A><H3>
isColumnControlVisible</H3>
<PRE>
public boolean <B>isColumnControlVisible</B>()</PRE>

<DL>
<DD>Returns the column control visible property.
 <p>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>boolean to indicate whether the column control is visible.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnControlVisible(boolean)"><CODE>setColumnControlVisible(boolean)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnControl(javax.swing.JComponent)"><CODE>setColumnControl(JComponent)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setColumnControlVisible(boolean)"><!-- --></A><H3>
setColumnControlVisible</H3>
<PRE>
public void <B>setColumnControlVisible</B>(boolean&nbsp;visible)</PRE>
<DL>
<DD>Sets the column control visible property. If true and
 <code>JXTable</code> is contained in a <code>JScrollPane</code>, the
 table adds the column control to the trailing corner of the scroll pane.
 <p>

 
 Note: if the table is not inside a <code>JScrollPane</code> the column
 control is not shown even if this returns true. In this case it's the
 responsibility of the client code to actually show it.
 <p>
 
 The default value is <code>false</code>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>visible</CODE> - boolean to indicate if the column control should be shown<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isColumnControlVisible()"><CODE>isColumnControlVisible()</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnControl(javax.swing.JComponent)"><CODE>setColumnControl(JComponent)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getColumnControl()"><!-- --></A><H3>
getColumnControl</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComponent.html" title="class or interface in javax.swing">JComponent</A> <B>getColumnControl</B>()</PRE>
<DL>

<DD>Returns the component used as column control. Lazily creates the 
 control to the default if it is <code>null</code>.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>component for column control, guaranteed to be != null.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnControl(javax.swing.JComponent)"><CODE>setColumnControl(JComponent)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#createDefaultColumnControl()"><CODE>createDefaultColumnControl()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setColumnControl(javax.swing.JComponent)"><!-- --></A><H3>
setColumnControl</H3>
<PRE>
public void <B>setColumnControl</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComponent.html" title="class or interface in javax.swing">JComponent</A>&nbsp;columnControl)</PRE>
<DL>
<DD>Sets the component used as column control. Updates the enclosing
 <code>JScrollPane</code> if appropriate. Passing a <code>null</code>

 parameter restores the column control to the default.
 <p>
 The component is automatically visible only if the
 <code>columnControlVisible</code> property is <code>true</code> and
 the table is contained in a <code>JScrollPane</code>.
 
 <p>
 NOTE: from the table's perspective, the column control is simply a
 <code>JComponent</code> to add to and keep in the trailing corner of
 the scrollpane. (if any). It's up the concrete control to configure
 itself from and keep synchronized to the columns' states.
 <p>

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>columnControl</CODE> - the <code>JComponent</code> to use as
        columnControl.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumnControl()"><CODE>getColumnControl()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#createDefaultColumnControl()"><CODE>createDefaultColumnControl()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnControlVisible(boolean)"><CODE>setColumnControlVisible(boolean)</CODE></A></DL>
</DD>

</DL>
<HR>

<A NAME="createDefaultColumnControl()"><!-- --></A><H3>
createDefaultColumnControl</H3>
<PRE>
protected <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComponent.html" title="class or interface in javax.swing">JComponent</A> <B>createDefaultColumnControl</B>()</PRE>
<DL>
<DD>Creates the default column control used by this table.
 This implementation returns a <code>ColumnControlButton</code> configured
 with default <code>ColumnControlIcon</code>.

<P>
<DD><DL>

<DT><B>Returns:</B><DD>the default component used as column control.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnControl(javax.swing.JComponent)"><CODE>setColumnControl(JComponent)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/table/ColumnControlButton.html" title="class in org.jdesktop.swingx.table"><CODE>ColumnControlButton</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/icon/ColumnControlIcon.html" title="class in org.jdesktop.swingx.icon"><CODE>ColumnControlIcon</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setComponentOrientation(java.awt.ComponentOrientation)"><!-- --></A><H3>

setComponentOrientation</H3>
<PRE>
public void <B>setComponentOrientation</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/ComponentOrientation.html" title="class or interface in java.awt">ComponentOrientation</A>&nbsp;o)</PRE>
<DL>
<DD>Sets the language-sensitive orientation that is to be used to order
 the elements or text within this component. <p>
 
 Overridden to work around a core bug: 
 <code>JScrollPane</code> can't cope with
 corners when changing component orientation at runtime.
 This method explicitly re-configures the column control. <p>

<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Component.html#setComponentOrientation(java.awt.ComponentOrientation)" title="class or interface in java.awt">setComponentOrientation</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Component.html" title="class or interface in java.awt">Component</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - the ComponentOrientation for this table.<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Component.html#setComponentOrientation(java.awt.ComponentOrientation)" title="class or interface in java.awt"><CODE>Component.setComponentOrientation(ComponentOrientation)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="configureEnclosingScrollPane()"><!-- --></A><H3>
configureEnclosingScrollPane</H3>
<PRE>
protected void <B>configureEnclosingScrollPane</B>()</PRE>
<DL>
<DD>Configures the enclosing <code>JScrollPane</code>. <p>

  
 Overridden to addionally configure the upper trailing corner 
 with the column control.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#configureEnclosingScrollPane()" title="class or interface in javax.swing">configureEnclosingScrollPane</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#configureColumnControl()"><CODE>configureColumnControl()</CODE></A></DL>
</DD>
</DL>

<HR>

<A NAME="configureColumnControl()"><!-- --></A><H3>
configureColumnControl</H3>
<PRE>
protected void <B>configureColumnControl</B>()</PRE>
<DL>
<DD>Configures the upper trailing corner of an enclosing 
 <code>JScrollPane</code>.
 
 Adds/removes the <code>ColumnControl</code> depending on the 
 <code>columnControlVisible</code> property.<p>

<P>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnControlVisible(boolean)"><CODE>setColumnControlVisible(boolean)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnControl(javax.swing.JComponent)"><CODE>setColumnControl(JComponent)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="packAll()"><!-- --></A><H3>
packAll</H3>
<PRE>
public void <B>packAll</B>()</PRE>

<DL>
<DD>Resizes all columns to fit their content. <p> 
 
 By default this method is bound to the pack all columns
 <code>Action</code> and registered in the table's <code>ActionMap</code>.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="packSelected()"><!-- --></A><H3>

packSelected</H3>
<PRE>
public void <B>packSelected</B>()</PRE>
<DL>
<DD>Resizes the lead column to fit its content. <p>
 
 By default this method is bound to the pack selected column
 <code>Action</code> and registered in the table's <code>ActionMap</code>.

<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="columnSelectionChanged(javax.swing.event.ListSelectionEvent)"><!-- --></A><H3>
columnSelectionChanged</H3>
<PRE>
public void <B>columnSelectionChanged</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/ListSelectionEvent.html" title="class or interface in javax.swing.event">ListSelectionEvent</A>&nbsp;e)</PRE>

<DL>
<DD>Invoked when the selection model of the <code>TableColumnModel</code>
 is changed.
 <p>
 Application code will not use these methods explicitly, they
 are used internally by JTable. <p>
 
  Overridden to update the enabled state of the pack selected column
  <code>Action</code>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html#columnSelectionChanged(javax.swing.event.ListSelectionEvent)" title="class or interface in javax.swing.event">columnSelectionChanged</A></CODE> in interface <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html" title="class or interface in javax.swing.event">TableColumnModelListener</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#columnSelectionChanged(javax.swing.event.ListSelectionEvent)" title="class or interface in javax.swing">columnSelectionChanged</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>

</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>e</CODE> - the event received<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html" title="class or interface in javax.swing.event"><CODE>TableColumnModelListener</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setHorizontalScrollEnabled(boolean)"><!-- --></A><H3>
setHorizontalScrollEnabled</H3>
<PRE>

public void <B>setHorizontalScrollEnabled</B>(boolean&nbsp;enabled)</PRE>
<DL>
<DD>Sets the enablement of enhanced horizontal scrolling. 
 If enabled, it toggles an auto-resize mode which always
 fills the <code>JViewport</code> horizontally and shows the horizontal scrollbar if
 necessary. <p>
 
 The default value is <code>false</code>. <p>
 
 PENDING JW: the name is mis-leading?

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>enabled</CODE> - a boolean indicating whether enhanced auto-resize mode is
   enabled.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isHorizontalScrollEnabled()"><CODE>isHorizontalScrollEnabled()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isHorizontalScrollEnabled()"><!-- --></A><H3>
isHorizontalScrollEnabled</H3>
<PRE>

protected boolean <B>isHorizontalScrollEnabled</B>()</PRE>
<DL>
<DD>Returns the current setting for horizontal scrolling.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the enablement of enhanced horizontal scrolling.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setHorizontalScrollEnabled(boolean)"><CODE>setHorizontalScrollEnabled(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setAutoResizeMode(int)"><!-- --></A><H3>
setAutoResizeMode</H3>
<PRE>
public void <B>setAutoResizeMode</B>(int&nbsp;mode)</PRE>
<DL>
<DD>Sets the table's auto resize mode when the table is resized.
 <p>
 
 Overridden for internal bookkeeping related to the enhanced
 auto-resize behaviour.
 <p>
 
 Note: to enable/disable the enhanced auto-resize mode use exclusively
 <code>setHorizontalScrollEnabled</code>, this method can't cope with it.

<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setAutoResizeMode(int)" title="class or interface in javax.swing">setAutoResizeMode</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mode</CODE> - One of 5 legal values:
                   AUTO_RESIZE_OFF,
                   AUTO_RESIZE_NEXT_COLUMN,
                   AUTO_RESIZE_SUBSEQUENT_COLUMNS,
                   AUTO_RESIZE_LAST_COLUMN,
                   AUTO_RESIZE_ALL_COLUMNS<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setHorizontalScrollEnabled(boolean)"><CODE>setHorizontalScrollEnabled(boolean)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="updateHorizontalAction()"><!-- --></A><H3>
updateHorizontalAction</H3>
<PRE>
protected void <B>updateHorizontalAction</B>()</PRE>
<DL>
<DD>Synchs selected state of horizontal scrolling <code>Action</code> to
 enablement of enhanced auto-resize behaviour.

<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getScrollableTracksViewportWidth()"><!-- --></A><H3>
getScrollableTracksViewportWidth</H3>
<PRE>
public boolean <B>getScrollableTracksViewportWidth</B>()</PRE>
<DL>
<DD>Returns false if <code>autoResizeMode</code> is set to
 <code>AUTO_RESIZE_OFF</code>, which indicates that the
 width of the viewport does not determine the width
 of the table.  Otherwise returns true. <p>

 Overridden to support enhanced auto-resize behaviour enabled and 
 necessary.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()" title="class or interface in javax.swing">getScrollableTracksViewportWidth</A></CODE> in interface <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/Scrollable.html" title="class or interface in javax.swing">Scrollable</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getScrollableTracksViewportWidth()" title="class or interface in javax.swing">getScrollableTracksViewportWidth</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>

<DD><DL>

<DT><B>Returns:</B><DD>false if <code>autoResizeMode</code> is set
   to <code>AUTO_RESIZE_OFF</code>, otherwise returns true<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setHorizontalScrollEnabled(boolean)"><CODE>setHorizontalScrollEnabled(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="doLayout()"><!-- --></A><H3>

doLayout</H3>
<PRE>
public void <B>doLayout</B>()</PRE>
<DL>
<DD>Causes this table to lay out its rows and columns.  Overridden so
 that columns can be resized to accomodate a change in the size of
 a containing parent.
 Resizes one or more of the columns in the table
 so that the total width of all of this <code>JTable</code>'s
 columns is equal to the width of the table.
 <p>
 Before the layout begins the method gets the
 <code>resizingColumn</code> of the <code>tableHeader</code>.
 When the method is called as a result of the resizing of an enclosing window,
 the <code>resizingColumn</code> is <code>null</code>. This means that resizing
 has taken place "outside" the <code>JTable</code> and the change -
 or "delta" - should be distributed to all of the columns regardless
 of this <code>JTable</code>'s automatic resize mode.
 <p>

 If the <code>resizingColumn</code> is not <code>null</code>, it is one of
 the columns in the table that has changed size rather than
 the table itself. In this case the auto-resize modes govern
 the way the extra (or deficit) space is distributed
 amongst the available columns.
 <p>
 The modes are:
 <ul>
 <li>  AUTO_RESIZE_OFF: Don't automatically adjust the column's
 widths at all. Use a horizontal scrollbar to accomodate the
 columns when their sum exceeds the width of the
 <code>Viewport</code>.  If the <code>JTable</code> is not
 enclosed in a <code>JScrollPane</code> this may
 leave parts of the table invisible.
 <li>  AUTO_RESIZE_NEXT_COLUMN: Use just the column after the
 resizing column. This results in the "boundary" or divider
 between adjacent cells being independently adjustable.
 <li>  AUTO_RESIZE_SUBSEQUENT_COLUMNS: Use all columns after the
 one being adjusted to absorb the changes.  This is the
 default behavior.
 <li>  AUTO_RESIZE_LAST_COLUMN: Automatically adjust the
 size of the last column only. If the bounds of the last column
 prevent the desired size from being allocated, set the
 width of the last column to the appropriate limit and make
 no further adjustments.
 <li>  AUTO_RESIZE_ALL_COLUMNS: Spread the delta amongst all the columns
 in the <code>JTable</code>, including the one that is being
 adjusted.
 </ul>

 <p>
 <bold>Note:</bold> When a <code>JTable</code> makes adjustments
   to the widths of the columns it respects their minimum and
   maximum values absolutely.  It is therefore possible that,
   even after this method is called, the total width of the columns
   is still not equal to the width of the table. When this happens
   the <code>JTable</code> does not put itself
   in AUTO_RESIZE_OFF mode to bring up a scroll bar, or break other
   commitments of its current auto-resize mode -- instead it
   allows its bounds to be set larger (or smaller) than the total of the
   column minimum or maximum, meaning, either that there
   will not be enough room to display all of the columns, or that the
   columns will not fill the <code>JTable</code>'s bounds.
   These respectively, result in the clipping of some columns
   or an area being painted in the <code>JTable</code>'s
   background color during painting.
 <p>

   The mechanism for distributing the delta amongst the available
   columns is provided in a private method in the <code>JTable</code>
   class:
 <pre>
   adjustSizes(long targetSize, final Resizable3 r, boolean inverse)
 </pre>
   an explanation of which is provided in the following section.
   <code>Resizable3</code> is a private
   interface that allows any data structure containing a collection
   of elements with a size, preferred size, maximum size and minimum size
   to have its elements manipulated by the algorithm.
 <p>
 <H3> Distributing the delta </H3>

 <p>
 <H4> Overview </H4>
 <P>
 Call "DELTA" the difference between the target size and the
 sum of the preferred sizes of the elements in r. The individual
 sizes are calculated by taking the original preferred
 sizes and adding a share of the DELTA - that share being based on
 how far each preferred size is from its limiting bound (minimum or
 maximum).
 <p>
 <H4>Definition</H4>
 <P>
 Call the individual constraints min[i], max[i], and pref[i].
 <p>

 Call their respective sums: MIN, MAX, and PREF.
 <p>
 Each new size will be calculated using:
 <p>
 <pre>
          size[i] = pref[i] + delta[i]
 </pre>
 where each individual delta[i] is calculated according to:
 <p>
 If (DELTA < 0) we are in shrink mode where:
 <p>

 <PRE>
                        DELTA
          delta[i] = ------------ * (pref[i] - min[i])
                     (PREF - MIN)
 </PRE>
 If (DELTA > 0) we are in expand mode where:
 <p>
 <PRE>
                        DELTA
          delta[i] = ------------ * (max[i] - pref[i])
                      (MAX - PREF)
 </PRE>
 <P>
 The overall effect is that the total size moves that same percentage,
 k, towards the total minimum or maximum and that percentage guarantees
 accomodation of the required space, DELTA.

 <H4>Details</H4>

 <P>
 Naive evaluation of the formulae presented here would be subject to
 the aggregated rounding errors caused by doing this operation in finite
 precision (using ints). To deal with this, the multiplying factor above,
 is constantly recalculated and this takes account of the rounding
 errors in the previous iterations. The result is an algorithm that
 produces a set of integers whose values exactly sum to the supplied
 <code>targetSize</code>, and does so by spreading the rounding
 errors evenly over the given elements.

 <H4>When the MAX and MIN bounds are hit</H4>
 <P>
 When <code>targetSize</code> is outside the [MIN, MAX] range,
 the algorithm sets all sizes to their appropriate limiting value
 (maximum or minimum). <p>
 Overridden to support enhanced auto-resize behaviour enabled and 
 necessary.

<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#doLayout()" title="class or interface in javax.swing">doLayout</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setHorizontalScrollEnabled(boolean)"><CODE>setHorizontalScrollEnabled(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="columnMarginChanged(javax.swing.event.ChangeEvent)"><!-- --></A><H3>
columnMarginChanged</H3>
<PRE>
public void <B>columnMarginChanged</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/ChangeEvent.html" title="class or interface in javax.swing.event">ChangeEvent</A>&nbsp;e)</PRE>
<DL>
<DD>Invoked when a column is moved due to a margin change.
 If a cell is being edited, then editing is stopped and the cell
 is redrawn.
 <p>
 Application code will not use these methods explicitly, they
 are used internally by JTable.<p>
 
 Overridden to support enhanced auto-resize behaviour enabled and 
 necessary.

<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html#columnMarginChanged(javax.swing.event.ChangeEvent)" title="class or interface in javax.swing.event">columnMarginChanged</A></CODE> in interface <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html" title="class or interface in javax.swing.event">TableColumnModelListener</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#columnMarginChanged(javax.swing.event.ChangeEvent)" title="class or interface in javax.swing">columnMarginChanged</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>e</CODE> - the event received<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setHorizontalScrollEnabled(boolean)"><CODE>setHorizontalScrollEnabled(boolean)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="setFillsViewportHeight(boolean)"><!-- --></A><H3>
setFillsViewportHeight</H3>
<PRE>
public void <B>setFillsViewportHeight</B>(boolean&nbsp;fillsViewportHeight)</PRE>
<DL>
<DD>Sets the flag which controls the scrollableTracksViewportHeight property.
 If true the table's height will be always at least as large as the
 containing parent, if false the table's height will be independent of
 parent's height.
 <p>
 
 The default value is <code>true</code>.
 <p>

 
 Note: this a backport from Mustang's <code>JTable</code>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fillsViewportHeight</CODE> - boolean to indicate whether the table should
        always fill parent's height.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getFillsViewportHeight()"><CODE>getFillsViewportHeight()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#getScrollableTracksViewportHeight()"><CODE>getScrollableTracksViewportHeight()</CODE></A></DL>
</DD>
</DL>

<HR>

<A NAME="getFillsViewportHeight()"><!-- --></A><H3>
getFillsViewportHeight</H3>
<PRE>
public boolean <B>getFillsViewportHeight</B>()</PRE>
<DL>
<DD>Returns the flag which controls the scrollableTracksViewportHeight
 property.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if the table's height will always be at least as large
 as the containing parent, false if it is independent<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setFillsViewportHeight(boolean)"><CODE>setFillsViewportHeight(boolean)</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#getScrollableTracksViewportHeight()"><CODE>getScrollableTracksViewportHeight()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getScrollableTracksViewportHeight()"><!-- --></A><H3>
getScrollableTracksViewportHeight</H3>
<PRE>
public boolean <B>getScrollableTracksViewportHeight</B>()</PRE>
<DL>
<DD>Returns false to indicate that the height of the viewport does not
 determine the height of the table. <p>

 
 Overridden to control the tracksHeight property depending on 
 fillsViewportHeight and relative size to containing parent.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()" title="class or interface in javax.swing">getScrollableTracksViewportHeight</A></CODE> in interface <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/Scrollable.html" title="class or interface in javax.swing">Scrollable</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getScrollableTracksViewportHeight()" title="class or interface in javax.swing">getScrollableTracksViewportHeight</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the control flag is true and the containing parent
          height > prefHeight, else returns false.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setFillsViewportHeight(boolean)"><CODE>setFillsViewportHeight(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getRowCount()"><!-- --></A><H3>
getRowCount</H3>
<PRE>
public int <B>getRowCount</B>()</PRE>

<DL>
<DD>Returns the row count in the table; if filters are applied, this is the
 filtered row count.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getRowCount()" title="class or interface in javax.swing">getRowCount</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the number of rows in this table's model<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getColumnCount()" title="class or interface in javax.swing"><CODE>JTable.getColumnCount()</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="convertRowIndexToModel(int)"><!-- --></A><H3>
convertRowIndexToModel</H3>
<PRE>
public int <B>convertRowIndexToModel</B>(int&nbsp;row)</PRE>
<DL>
<DD>Convert row index from view coordinates to model coordinates accounting
 for the presence of sorters and filters.
<P>
<DD><DL>

<DT><B>Parameters:</B><DD><CODE>row</CODE> - row index in view coordinates
<DT><B>Returns:</B><DD>row index in model coordinates</DL>
</DD>
</DL>
<HR>

<A NAME="convertRowIndexToView(int)"><!-- --></A><H3>
convertRowIndexToView</H3>
<PRE>
public int <B>convertRowIndexToView</B>(int&nbsp;row)</PRE>

<DL>
<DD>Convert row index from model coordinates to view coordinates accounting
 for the presence of sorters and filters.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>row</CODE> - row index in model coordinates
<DT><B>Returns:</B><DD>row index in view coordinates</DL>
</DD>
</DL>
<HR>

<A NAME="getValueAt(int, int)"><!-- --></A><H3>
getValueAt</H3>

<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A> <B>getValueAt</B>(int&nbsp;row,
                         int&nbsp;column)</PRE>
<DL>
<DD>Overridden to account for row index mapping. 
 Returns the cell value at <code>row</code> and <code>column</code>.
 <p>

 <b>Note</b>: The column is specified in the table view's display
              order, and not in the <code>TableModel</code>'s column
                    order.  This is an important distinction because as the
                    user rearranges the columns in the table,
                    the column at a given index in the view will change.
              Meanwhile the user's actions never affect the model's
              column ordering.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getValueAt(int, int)" title="class or interface in javax.swing">getValueAt</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>row</CODE> - the row whose value is to be queried<DD><CODE>column</CODE> - the column whose value is to be queried

<DT><B>Returns:</B><DD>the Object at the specified cell</DL>
</DD>
</DL>
<HR>

<A NAME="setValueAt(java.lang.Object, int, int)"><!-- --></A><H3>
setValueAt</H3>
<PRE>
public void <B>setValueAt</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>&nbsp;aValue,
                       int&nbsp;row,
                       int&nbsp;column)</PRE>

<DL>
<DD>Overridden to account for row index mapping. This implementation 
 respects the cell's editability, that is it has no effect if 
 <code>!isCellEditable(row, column)</code>.
 
 Sets the value for the cell in the table model at <code>row</code>
 and <code>column</code>.
 <p>
 <b>Note</b>: The column is specified in the table view's display
              order, and not in the <code>TableModel</code>'s column
                    order.  This is an important distinction because as the
                    user rearranges the columns in the table,
                    the column at a given index in the view will change.
              Meanwhile the user's actions never affect the model's
              column ordering.

 <code>aValue</code> is the new value.

<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setValueAt(java.lang.Object, int, int)" title="class or interface in javax.swing">setValueAt</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>aValue</CODE> - the new value<DD><CODE>row</CODE> - the row of the cell to be changed<DD><CODE>column</CODE> - the column of the cell to be changed<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isCellEditable(int, int)"><CODE>isCellEditable(int, int)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="isCellEditable(int, int)"><!-- --></A><H3>
isCellEditable</H3>
<PRE>
public boolean <B>isCellEditable</B>(int&nbsp;row,
                              int&nbsp;column)</PRE>
<DL>
<DD>Returns true if the cell at <code>row</code> and <code>column</code>

 is editable. Otherwise, invoking <code>setValueAt</code> on the cell
 will have no effect.
 <p>
 Overridden to account for row index mapping and to support a layered
 editability control:
 <ul>
 <li> per-table: <code>JXTable.isEditable()</code>
 <li> per-column: <code>TableColumnExt.isEditable()</code>

 <li> per-cell: controlled by the model
 <code>TableModel.isCellEditable()</code>
 </ul>
 The view cell is considered editable only if all three layers are enabled.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#isCellEditable(int, int)" title="class or interface in javax.swing">isCellEditable</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>

</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>row</CODE> - the row index in view coordinates<DD><CODE>column</CODE> - the column index in view coordinates
<DT><B>Returns:</B><DD>true if the cell is editable<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setValueAt(java.lang.Object, int, int)"><CODE>setValueAt(Object, int, int)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#isEditable()"><CODE>isEditable()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/table/TableColumnExt.html#isEditable()"><CODE>TableColumnExt.isEditable()</CODE></A>, 

<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableModel.html#isCellEditable(int, int)" title="class or interface in javax.swing.table"><CODE>TableModel.isCellEditable(int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setSelectionModel(javax.swing.ListSelectionModel)"><!-- --></A><H3>
setSelectionModel</H3>
<PRE>
public void <B>setSelectionModel</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/ListSelectionModel.html" title="class or interface in javax.swing">ListSelectionModel</A>&nbsp;newModel)</PRE>
<DL>

<DD>Overridden to update selectionMapper
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setSelectionModel(javax.swing.ListSelectionModel)" title="class or interface in javax.swing">setSelectionModel</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newModel</CODE> - the new selection model<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getSelectionModel()" title="class or interface in javax.swing"><CODE>JTable.getSelectionModel()</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="setModel(javax.swing.table.TableModel)"><!-- --></A><H3>
setModel</H3>
<PRE>
public void <B>setModel</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableModel.html" title="class or interface in javax.swing.table">TableModel</A>&nbsp;newModel)</PRE>
<DL>
<DD>Sets the data model for this table to <code>newModel</code> and registers
 with it for listener notifications from the new data model.

<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setModel(javax.swing.table.TableModel)" title="class or interface in javax.swing">setModel</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newModel</CODE> - the new data source for this table<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getModel()" title="class or interface in javax.swing"><CODE>JTable.getModel()</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="tableChanged(javax.swing.event.TableModelEvent)"><!-- --></A><H3>
tableChanged</H3>
<PRE>
public void <B>tableChanged</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableModelEvent.html" title="class or interface in javax.swing.event">TableModelEvent</A>&nbsp;e)</PRE>
<DL>
<DD>additionally updates filtered state.
 Invoked when this table's <code>TableModel</code> generates
 a <code>TableModelEvent</code>.
 The <code>TableModelEvent</code> should be constructed in the
 coordinate system of the model; the appropriate mapping to the
 view coordinate system is performed by this <code>JTable</code>

 when it receives the event.
 <p>
 Application code will not use these methods explicitly, they
 are used internally by <code>JTable</code>.
 <p>
 Note that as of 1.3, this method clears the selection, if any.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableModelListener.html#tableChanged(javax.swing.event.TableModelEvent)" title="class or interface in javax.swing.event">tableChanged</A></CODE> in interface <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableModelListener.html" title="class or interface in javax.swing.event">TableModelListener</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#tableChanged(javax.swing.event.TableModelEvent)" title="class or interface in javax.swing">tableChanged</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>

</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isDataChanged(javax.swing.event.TableModelEvent)"><!-- --></A><H3>
isDataChanged</H3>
<PRE>
protected boolean <B>isDataChanged</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableModelEvent.html" title="class or interface in javax.swing.event">TableModelEvent</A>&nbsp;e)</PRE>

<DL>
<DD>Convenience method to detect dataChanged table event type.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>e</CODE> - the event to examine.
<DT><B>Returns:</B><DD>true if the event is of type dataChanged, false else.</DL>
</DD>
</DL>
<HR>

<A NAME="isUpdate(javax.swing.event.TableModelEvent)"><!-- --></A><H3>
isUpdate</H3>

<PRE>
protected boolean <B>isUpdate</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableModelEvent.html" title="class or interface in javax.swing.event">TableModelEvent</A>&nbsp;e)</PRE>
<DL>
<DD>Convenience method to detect update table event type.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>e</CODE> - the event to examine.
<DT><B>Returns:</B><DD>true if the event is of type update and not dataChanged, false else.</DL>

</DD>
</DL>
<HR>

<A NAME="isStructureChanged(javax.swing.event.TableModelEvent)"><!-- --></A><H3>
isStructureChanged</H3>
<PRE>
protected boolean <B>isStructureChanged</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableModelEvent.html" title="class or interface in javax.swing.event">TableModelEvent</A>&nbsp;e)</PRE>
<DL>
<DD>Convenience method to detect a structureChanged table event type.
<P>

<DD><DL>
<DT><B>Parameters:</B><DD><CODE>e</CODE> - the event to examine.
<DT><B>Returns:</B><DD>true if the event is of type structureChanged or null, false else.</DL>
</DD>
</DL>
<HR>

<A NAME="updateViewSizeSequence()"><!-- --></A><H3>
updateViewSizeSequence</H3>
<PRE>
protected void <B>updateViewSizeSequence</B>()</PRE>

<DL>
<DD>Called if individual row height mapping need to be updated.
 This implementation guards against unnessary access of 
 super's private rowModel field.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSelectionMapper()"><!-- --></A><H3>
getSelectionMapper</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/decorator/SelectionMapper.html" title="interface in org.jdesktop.swingx.decorator">SelectionMapper</A> <B>getSelectionMapper</B>()</PRE>

<DL>
<DD><DL>

<DT><B>Returns:</B><DD><code>SelectionMapper</code></DL>
</DD>
</DL>
<HR>

<A NAME="getFilters()"><!-- --></A><H3>
getFilters</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/decorator/FilterPipeline.html" title="class in org.jdesktop.swingx.decorator">FilterPipeline</A> <B>getFilters</B>()</PRE>

<DL>
<DD>Returns the FilterPipeline for the table.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFilters(org.jdesktop.swingx.decorator.FilterPipeline)"><!-- --></A><H3>
setFilters</H3>
<PRE>
public void <B>setFilters</B>(<A HREF="../../../org/jdesktop/swingx/decorator/FilterPipeline.html" title="class in org.jdesktop.swingx.decorator">FilterPipeline</A>&nbsp;pipeline)</PRE>

<DL>
<DD>Sets the FilterPipeline for filtering table rows, maybe null
  to remove all previously applied filters. 
  
  Note: the current "interactive" sortState is preserved (by 
  internally copying the old sortKeys to the new pipeline, if any).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pipeline</CODE> - the <code>FilterPipeline</code> to use, null removes
   all filters.</DL>
</DD>
</DL>
<HR>

<A NAME="getFilterPipelineListener()"><!-- --></A><H3>

getFilterPipelineListener</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/PipelineListener.html" title="interface in org.jdesktop.swingx.decorator">PipelineListener</A> <B>getFilterPipelineListener</B>()</PRE>
<DL>
<DD>returns the listener for changes in filters.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="createPipelineListener()"><!-- --></A><H3>
createPipelineListener</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/PipelineListener.html" title="interface in org.jdesktop.swingx.decorator">PipelineListener</A> <B>createPipelineListener</B>()</PRE>
<DL>
<DD>creates the listener for changes in filters.
<P>
<DD><DL>
</DL>
</DD>

</DL>
<HR>

<A NAME="updateOnFilterContentChanged()"><!-- --></A><H3>
updateOnFilterContentChanged</H3>
<PRE>
protected void <B>updateOnFilterContentChanged</B>()</PRE>
<DL>
<DD>method called on change notification from filterpipeline.
<P>
<DD><DL>
</DL>
</DD>

</DL>
<HR>

<A NAME="setSortable(boolean)"><!-- --></A><H3>
setSortable</H3>
<PRE>
public void <B>setSortable</B>(boolean&nbsp;sortable)</PRE>
<DL>
<DD>Sets &quot;sortable&quot; property indicating whether or not this table
 supports sortable columns. If <code>sortable</code> is
 <code>true</code> then sorting will be enabled on all columns whose
 <code>sortable</code> property is <code>true</code>. If
 <code>sortable</code> is <code>false</code> then sorting will be
 disabled for all columns, regardless of each column's individual
 <code>sorting</code> property. The default is <code>true</code>.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sortable</CODE> - boolean indicating whether or not this table supports sortable
            columns<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/table/TableColumnExt.html#isSortable()"><CODE>TableColumnExt.isSortable()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isSortable()"><!-- --></A><H3>
isSortable</H3>
<PRE>

public boolean <B>isSortable</B>()</PRE>
<DL>
<DD>Returns the table's sortable property.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if the table is sortable.</DL>
</DD>
</DL>
<HR>

<A NAME="resetSortOrder()"><!-- --></A><H3>

resetSortOrder</H3>
<PRE>
public void <B>resetSortOrder</B>()</PRE>
<DL>
<DD>Resets sorting of all columns.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="toggleSortOrder(int)"><!-- --></A><H3>

toggleSortOrder</H3>
<PRE>
public void <B>toggleSortOrder</B>(int&nbsp;columnIndex)</PRE>
<DL>
<DD>Toggles the sort order of the column at columnIndex.
 <p>
 The exact behaviour is defined by the SortController's
 toggleSortOrder implementation. Typically a unsorted 
 column is sorted in ascending order, a sorted column's
 order is reversed. 
 <p>
 Respects the tableColumnExt's sortable and comparator 
 properties: routes the column's comparator to the SortController
 and does nothing if !isSortable(column). 
 <p>

 
 PRE: 0 <= columnIndex < getColumnCount()
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>columnIndex</CODE> - the columnIndex in view coordinates.</DL>
</DD>
</DL>
<HR>

<A NAME="isSortable(int)"><!-- --></A><H3>
isSortable</H3>

<PRE>
protected boolean <B>isSortable</B>(int&nbsp;columnIndex)</PRE>
<DL>
<DD>Decides if the column at columnIndex can be interactively sorted. 
 <p>
 Here: true if both this table and the column sortable property is
 enabled, false otherwise.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>columnIndex</CODE> - column in view coordinates

<DT><B>Returns:</B><DD>boolean indicating whether or not the column is sortable
            in this table.</DL>
</DD>
</DL>
<HR>

<A NAME="setSortOrder(int, org.jdesktop.swingx.decorator.SortOrder)"><!-- --></A><H3>
setSortOrder</H3>
<PRE>
public void <B>setSortOrder</B>(int&nbsp;columnIndex,
                         <A HREF="../../../org/jdesktop/swingx/decorator/SortOrder.html" title="class in org.jdesktop.swingx.decorator">SortOrder</A>&nbsp;sortOrder)</PRE>

<DL>
<DD>Sorts the table by the given column using SortOrder. 
 
 
 Respects the tableColumnExt's sortable and comparator 
 properties: routes the column's comparator to the SortController
 and does nothing if !isSortable(column). 
 <p>
 
 PRE: 0 <= columnIndex < getColumnCount() 
 <p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>columnIndex</CODE> - the column index in view coordinates.<DD><CODE>sortOrder</CODE> - the sort order to use. If null or SortOrder.UNSORTED, 
   this method has the same effect as resetSortOrder();</DL>

</DD>
</DL>
<HR>

<A NAME="getSortOrder(int)"><!-- --></A><H3>
getSortOrder</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/decorator/SortOrder.html" title="class in org.jdesktop.swingx.decorator">SortOrder</A> <B>getSortOrder</B>(int&nbsp;columnIndex)</PRE>
<DL>
<DD>Returns the SortOrder of the given column.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>columnIndex</CODE> - the column index in view coordinates.
<DT><B>Returns:</B><DD>the interactive sorter's SortOrder if matches the column 
  or SortOrder.UNSORTED</DL>
</DD>
</DL>
<HR>

<A NAME="toggleSortOrder(java.lang.Object)"><!-- --></A><H3>
toggleSortOrder</H3>
<PRE>

public void <B>toggleSortOrder</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>&nbsp;identifier)</PRE>
<DL>
<DD>Toggles the sort order of the column with identifier.
 <p>
 The exact behaviour is defined by the SortController's
 toggleSortOrder implementation. Typically a unsorted 
 column is sorted in ascending order, a sorted column's
 order is reversed. 
 <p>
 Respects the tableColumnExt's sortable and comparator 
 properties: routes the column's comparator to the SortController
 and does nothing if !isSortable(column). 
 <p>
 
 PENDING: JW - define the behaviour if the identifier is not found.
   This can happen if either there's no column at all with the identifier
   or if there's no column of type TableColumnExt.
   Currently does nothing, that is does not change sort state.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>identifier</CODE> - the column identifier.</DL>
</DD>
</DL>
<HR>

<A NAME="setSortOrder(java.lang.Object, org.jdesktop.swingx.decorator.SortOrder)"><!-- --></A><H3>
setSortOrder</H3>
<PRE>
public void <B>setSortOrder</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>&nbsp;identifier,
                         <A HREF="../../../org/jdesktop/swingx/decorator/SortOrder.html" title="class in org.jdesktop.swingx.decorator">SortOrder</A>&nbsp;sortOrder)</PRE>

<DL>
<DD>Sorts the table by the given column using the SortOrder. 
 
 
 Respects the tableColumnExt's sortable and comparator 
 properties: routes the column's comparator to the SortController
 and does nothing if !isSortable(column). 
 <p>
 
 PENDING: JW - define the behaviour if the identifier is not found.
   This can happen if either there's no column at all with the identifier
   or if there's no column of type TableColumnExt.
   Currently does nothing, that is does not change sort state.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>identifier</CODE> - the column's identifier.<DD><CODE>sortOrder</CODE> - the sort order to use. If null or SortOrder.UNSORTED, 
   this method has the same effect as resetSortOrder();</DL>
</DD>
</DL>

<HR>

<A NAME="getSortOrder(java.lang.Object)"><!-- --></A><H3>
getSortOrder</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/decorator/SortOrder.html" title="class in org.jdesktop.swingx.decorator">SortOrder</A> <B>getSortOrder</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>&nbsp;identifier)</PRE>
<DL>
<DD>Returns the SortOrder of the given column. 
 
 PENDING: JW - define the behaviour if the identifier is not found.
   This can happen if either there's no column at all with the identifier
   or if there's no column of type TableColumnExt.
   Currently returns SortOrder.UNSORTED.
<P>

<DD><DL>
<DT><B>Parameters:</B><DD><CODE>identifier</CODE> - the column's identifier.
<DT><B>Returns:</B><DD>the interactive sorter's SortOrder if matches the column 
  or SortOrder.UNSORTED</DL>
</DD>
</DL>
<HR>

<A NAME="isSortable(java.lang.Object)"><!-- --></A><H3>
isSortable</H3>
<PRE>
protected boolean <B>isSortable</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>&nbsp;identifier)</PRE>

<DL>
<DD>Decides if the column with identifier can be interactively sorted. 
 <p>
 Here: true if both this table and the column sortable property is
 enabled, false otherwise.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>identifier</CODE> - the column's identifier
<DT><B>Returns:</B><DD>boolean indicating whether or not the column is sortable
            in this table.</DL>
</DD>
</DL>
<HR>

<A NAME="getSortController()"><!-- --></A><H3>
getSortController</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/SortController.html" title="interface in org.jdesktop.swingx.decorator">SortController</A> <B>getSortController</B>()</PRE>
<DL>
<DD>returns the currently active SortController. Can be null
 on the very first call after instantiation.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the currently active <code>SortController</code> may be null</DL>

</DD>
</DL>
<HR>

<A NAME="getSortedColumn()"><!-- --></A><H3>
getSortedColumn</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumn.html" title="class or interface in javax.swing.table">TableColumn</A> <B>getSortedColumn</B>()</PRE>
<DL>
<DD><DL>

<DT><B>Returns:</B><DD>the currently interactively sorted TableColumn or null
   if there is not sorter active or if the sorted column index 
   does not correspond to any column in the TableColumnModel.</DL>
</DD>
</DL>
<HR>

<A NAME="columnRemoved(javax.swing.event.TableColumnModelEvent)"><!-- --></A><H3>
columnRemoved</H3>
<PRE>
public void <B>columnRemoved</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelEvent.html" title="class or interface in javax.swing.event">TableColumnModelEvent</A>&nbsp;e)</PRE>

<DL>
<DD>overridden to remove the interactive sorter if the
 sorted column is no longer contained in the ColumnModel.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html#columnRemoved(javax.swing.event.TableColumnModelEvent)" title="class or interface in javax.swing.event">columnRemoved</A></CODE> in interface <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html" title="class or interface in javax.swing.event">TableColumnModelListener</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#columnRemoved(javax.swing.event.TableColumnModelEvent)" title="class or interface in javax.swing">columnRemoved</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/TableColumnModelListener.html" title="class or interface in javax.swing.event"><CODE>TableColumnModelListener</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getColumn(int)"><!-- --></A><H3>
getColumn</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumn.html" title="class or interface in javax.swing.table">TableColumn</A> <B>getColumn</B>(int&nbsp;viewColumnIndex)</PRE>

<DL>
<DD>Returns the <code>TableColumn</code> at view position
 <code>columnIndex</code>. The return value is not <code>null</code>.
 
 <p>
 NOTE: This delegate method is added to protect developer's from
 unexpected exceptions in jdk1.5+. Super does not expose the
 <code>TableColumn</code> access by index which may lead to unexpected
 <code>IllegalArgumentException</code>: If client code assumes the
 delegate method is available, autoboxing will convert the given int to an
 Integer which will call the getColumn(Object) method.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>viewColumnIndex</CODE> - index of the column with the object in question
<DT><B>Returns:</B><DD>the <code>TableColumn</code> object that matches the column
         index
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ArrayIndexOutOfBoundsException.html" title="class or interface in java.lang">ArrayIndexOutOfBoundsException</A></CODE> - if viewColumnIndex out of allowed
         range.<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getColumn(java.lang.Object)" title="class or interface in javax.swing"><CODE>JTable.getColumn(Object)</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumnExt(int)"><CODE>getColumnExt(int)</CODE></A>, 
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumnModel.html#getColumn(int)" title="class or interface in javax.swing.table"><CODE>TableColumnModel.getColumn(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getColumns()"><!-- --></A><H3>
getColumns</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/util/List.html" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumn.html" title="class or interface in javax.swing.table">TableColumn</A>&gt; <B>getColumns</B>()</PRE>

<DL>
<DD>Returns a <code>List</code> of visible <code>TableColumn</code>s.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a <code>List</code> of visible columns.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumns(boolean)"><CODE>getColumns(boolean)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="getColumnMargin()"><!-- --></A><H3>
getColumnMargin</H3>
<PRE>
public int <B>getColumnMargin</B>()</PRE>
<DL>
<DD>Returns the margin between columns.
 <p>
 
 Convenience to expose column model properties through
 <code>JXTable</code> api.

<P>
<DD><DL>

<DT><B>Returns:</B><DD>the margin between columns<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnMargin(int)"><CODE>setColumnMargin(int)</CODE></A>, 
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumnModel.html#getColumnMargin()" title="class or interface in javax.swing.table"><CODE>TableColumnModel.getColumnMargin()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setColumnMargin(int)"><!-- --></A><H3>
setColumnMargin</H3>

<PRE>
public void <B>setColumnMargin</B>(int&nbsp;value)</PRE>
<DL>
<DD>Sets the margin between columns.
 
 Convenience to expose column model properties through
 <code>JXTable</code> api.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - margin between columns; must be greater than or equal to
        zero.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumnMargin()"><CODE>getColumnMargin()</CODE></A>, 

<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumnModel.html#setColumnMargin(int)" title="class or interface in javax.swing.table"><CODE>TableColumnModel.setColumnMargin(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getColumnCount(boolean)"><!-- --></A><H3>
getColumnCount</H3>
<PRE>
public int <B>getColumnCount</B>(boolean&nbsp;includeHidden)</PRE>
<DL>
<DD>Returns the number of contained columns. The count includes or excludes invisible
 columns, depending on whether the <code>includeHidden</code> is true or
 false, respectively. If false, this method returns the same count as
 <code>getColumnCount()</code>. If the columnModel is not of type
 <code>TableColumnModelExt</code>, the parameter value has no effect.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>includeHidden</CODE> - a boolean to indicate whether invisible columns
        should be included
<DT><B>Returns:</B><DD>the number of contained columns, including or excluding the
         invisible as specified.<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getColumnCount()" title="class or interface in javax.swing"><CODE>JTable.getColumnCount()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/table/TableColumnModelExt.html#getColumnCount(boolean)"><CODE>TableColumnModelExt.getColumnCount(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getColumns(boolean)"><!-- --></A><H3>
getColumns</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/util/List.html" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumn.html" title="class or interface in javax.swing.table">TableColumn</A>&gt; <B>getColumns</B>(boolean&nbsp;includeHidden)</PRE>
<DL>
<DD>Returns a <code>List</code> of contained <code>TableColumn</code>s.
 Includes or excludes invisible columns, depending on whether the
 <code>includeHidden</code> is true or false, respectively. If false, an
 <code>Iterator</code> over the List is equivalent to the
 <code>Enumeration</code> returned by <code>getColumns()</code>. 
 If the columnModel is not of type
 <code>TableColumnModelExt</code>, the parameter value has no effect.
 <p>

 
 NOTE: the order of columns in the List depends on whether or not the
 invisible columns are included, in the former case it's the insertion
 order in the latter it's the current order of the visible columns.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>includeHidden</CODE> - a boolean to indicate whether invisible columns
        should be included
<DT><B>Returns:</B><DD>a <code>List</code> of contained columns.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumns()"><CODE>getColumns()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/table/TableColumnModelExt.html#getColumns(boolean)"><CODE>TableColumnModelExt.getColumns(boolean)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="getColumnExt(java.lang.Object)"><!-- --></A><H3>
getColumnExt</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/table/TableColumnExt.html" title="class in org.jdesktop.swingx.table">TableColumnExt</A> <B>getColumnExt</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>&nbsp;identifier)</PRE>
<DL>

<DD>Returns the first <code>TableColumnExt</code> with the given
 <code>identifier</code>. The return value is null if there is no contained
 column with <b>identifier</b> or if the column with <code>identifier</code> is not 
 of type <code>TableColumnExt</code>. The returned column
 may be visible or hidden.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>identifier</CODE> - the object used as column identifier

<DT><B>Returns:</B><DD>first <code>TableColumnExt</code> with the given identifier or
         null if none is found<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumnExt(int)"><CODE>getColumnExt(int)</CODE></A>, 
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getColumn(java.lang.Object)" title="class or interface in javax.swing"><CODE>JTable.getColumn(Object)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/table/TableColumnModelExt.html#getColumnExt(java.lang.Object)"><CODE>TableColumnModelExt.getColumnExt(Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getColumnExt(int)"><!-- --></A><H3>

getColumnExt</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/table/TableColumnExt.html" title="class in org.jdesktop.swingx.table">TableColumnExt</A> <B>getColumnExt</B>(int&nbsp;viewColumnIndex)</PRE>
<DL>
<DD>Returns the <code>TableColumnExt</code> at view position
 <code>columnIndex</code>. The return value is null, if the column at
 position <code>columnIndex</code> is not of type
 <code>TableColumnExt</code>. The returned column is visible.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>viewColumnIndex</CODE> - the index of the column desired
<DT><B>Returns:</B><DD>the <code>TableColumnExt</code> object that matches the column
         index
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ArrayIndexOutOfBoundsException.html" title="class or interface in java.lang">ArrayIndexOutOfBoundsException</A></CODE> - if columnIndex out of allowed
         range, that is if
         <code> (columnIndex < 0) || (columnIndex >= getColumnCount())</code>.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumnExt(java.lang.Object)"><CODE>getColumnExt(Object)</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumn(int)"><CODE>getColumn(int)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/table/TableColumnModelExt.html#getColumnExt(int)"><CODE>TableColumnModelExt.getColumnExt(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setColumnSequence(java.lang.Object[])"><!-- --></A><H3>
setColumnSequence</H3>
<PRE>
public void <B>setColumnSequence</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Object.html" title="class or interface in java.lang">Object</A>[]&nbsp;identifiers)</PRE>

<DL>
<DD>Reorders the columns in the sequence given array. Logical names that do
 not correspond to any column in the model will be ignored. Columns with
 logical names not contained are added at the end.
 
 PENDING JW - do we want this? It's used by JNTable.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>identifiers</CODE> - array of logical column names<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumns(boolean)"><CODE>getColumns(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="createDefaultColumnsFromModel()"><!-- --></A><H3>
createDefaultColumnsFromModel</H3>

<PRE>
public void <B>createDefaultColumnsFromModel</B>()</PRE>
<DL>
<DD>Creates, configures and adds default <code>TableColumn</code>s for
 columns in this table's <code>TableModel</code>. Removes all currently
 contained <code>TableColumn</code>s. The exact type and configuration
 of the columns is controlled by the <code>ColumnFactory</code>.
 <p>
<P>

<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#createDefaultColumnsFromModel()" title="class or interface in javax.swing">createDefaultColumnsFromModel</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/table/ColumnFactory.html" title="class in org.jdesktop.swingx.table"><CODE>ColumnFactory</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getColumnFactory()"><!-- --></A><H3>

getColumnFactory</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/table/ColumnFactory.html" title="class in org.jdesktop.swingx.table">ColumnFactory</A> <B>getColumnFactory</B>()</PRE>
<DL>
<DD>Returns the ColumnFactory. <p>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the columnFactory to use for column creation and
   configuration.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setColumnFactory(org.jdesktop.swingx.table.ColumnFactory)"><CODE>setColumnFactory(ColumnFactory)</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/table/ColumnFactory.html" title="class in org.jdesktop.swingx.table"><CODE>ColumnFactory</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setColumnFactory(org.jdesktop.swingx.table.ColumnFactory)"><!-- --></A><H3>
setColumnFactory</H3>
<PRE>
public void <B>setColumnFactory</B>(<A HREF="../../../org/jdesktop/swingx/table/ColumnFactory.html" title="class in org.jdesktop.swingx.table">ColumnFactory</A>&nbsp;columnFactory)</PRE>
<DL>

<DD>Sets the <code>ColumnFactory</code> to use for column creation and 
 configuration. The default value is the shared application
 ColumnFactory.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>columnFactory</CODE> - the factory to use, <code>null</code> indicates
    to use the shared application factory.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getColumnFactory()"><CODE>getColumnFactory()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/table/ColumnFactory.html" title="class in org.jdesktop.swingx.table"><CODE>ColumnFactory</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="packTable(int)"><!-- --></A><H3>
packTable</H3>
<PRE>
public void <B>packTable</B>(int&nbsp;margin)</PRE>
<DL>
<DD>Packs all the columns to their optimal size. Works best with auto
 resizing turned off.
<P>
<DD><DL>

<DT><B>Parameters:</B><DD><CODE>margin</CODE> - the margin to apply to each column.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#packColumn(int, int)"><CODE>packColumn(int, int)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#packColumn(int, int, int)"><CODE>packColumn(int, int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="packColumn(int, int)"><!-- --></A><H3>
packColumn</H3>
<PRE>

public void <B>packColumn</B>(int&nbsp;column,
                       int&nbsp;margin)</PRE>
<DL>
<DD>Packs an indivudal column in the table.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>column</CODE> - The Column index to pack in View Coordinates<DD><CODE>margin</CODE> - The Margin to apply to the column width.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#packColumn(int, int, int)"><CODE>packColumn(int, int, int)</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#packTable(int)"><CODE>packTable(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="packColumn(int, int, int)"><!-- --></A><H3>
packColumn</H3>
<PRE>
public void <B>packColumn</B>(int&nbsp;column,
                       int&nbsp;margin,
                       int&nbsp;max)</PRE>

<DL>
<DD>Packs an indivual column in the table to less than or equal to the
 maximum witdth. If maximum is -1 then the column is made as wide as it
 needs.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>column</CODE> - the column index to pack in view coordinates<DD><CODE>margin</CODE> - the margin to apply to the column<DD><CODE>max</CODE> - the maximum width the column can be resized to, -1 means no limit<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#packColumn(int, int)"><CODE>packColumn(int, int)</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#packTable(int)"><CODE>packTable(int)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/table/ColumnFactory.html#packColumn(org.jdesktop.swingx.JXTable, org.jdesktop.swingx.table.TableColumnExt, int, int)"><CODE>ColumnFactory.packColumn(JXTable, TableColumnExt, int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getVisibleRowCount()"><!-- --></A><H3>
getVisibleRowCount</H3>
<PRE>
public int <B>getVisibleRowCount</B>()</PRE>
<DL>

<DD>Returns the preferred number of rows to show in a
 <code>JScrollPane</code>.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the number of rows to show in a <code>JScrollPane</code><DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setVisibleRowCount(int)"><CODE>setVisibleRowCount(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setVisibleRowCount(int)"><!-- --></A><H3>

setVisibleRowCount</H3>
<PRE>
public void <B>setVisibleRowCount</B>(int&nbsp;visibleRowCount)</PRE>
<DL>
<DD>Sets the preferred number of rows to show in a <code>JScrollPane</code>.
 <p>
 
 TODO JW - make bound property, reset scrollablePref(? distinguish
 internal from client code triggered like in rowheight?) and re-layout.
<P>
<DD><DL>

<DT><B>Parameters:</B><DD><CODE>visibleRowCount</CODE> - number of rows to show in a <code>JScrollPane</code><DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getVisibleRowCount()"><CODE>getVisibleRowCount()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getPreferredScrollableViewportSize()"><!-- --></A><H3>
getPreferredScrollableViewportSize</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Dimension.html" title="class or interface in java.awt">Dimension</A> <B>getPreferredScrollableViewportSize</B>()</PRE>

<DL>
<DD>Returns the preferred size of the viewport for this table. <p>
 
 TODO JW: refactor and comment.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/Scrollable.html#getPreferredScrollableViewportSize()" title="class or interface in javax.swing">getPreferredScrollableViewportSize</A></CODE> in interface <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/Scrollable.html" title="class or interface in javax.swing">Scrollable</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getPreferredScrollableViewportSize()" title="class or interface in javax.swing">getPreferredScrollableViewportSize</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>

</DD>
<DD><DL>

<DT><B>Returns:</B><DD>a <code>Dimension</code> object containing the <code>preferredSize</code> of the <code>JViewport</code>
         which displays this table<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/Scrollable.html#getPreferredScrollableViewportSize()" title="class or interface in javax.swing"><CODE>Scrollable.getPreferredScrollableViewportSize()</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="initializeColumnPreferredWidth(javax.swing.table.TableColumn)"><!-- --></A><H3>
initializeColumnPreferredWidth</H3>
<PRE>
protected void <B>initializeColumnPreferredWidth</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumn.html" title="class or interface in javax.swing.table">TableColumn</A>&nbsp;column)</PRE>
<DL>
<DD>Initialize the preferredWidth of the specified column based on the
 column's prototypeValue property. If the column is not an instance of
 <code>TableColumnExt</code> or prototypeValue is <code>null</code>

 then the preferredWidth is left unmodified.
 <p>
 
 TODO JW - need to cleanup getScrollablePreferred (refactor and inline)
 update doc - what exactly happens is left to the columnfactory.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>column</CODE> - TableColumn object representing view column<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/table/TableColumnExt.html#setPrototypeValue(java.lang.Object)"><CODE>TableColumnExt.setPrototypeValue(java.lang.Object)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="scrollRowToVisible(int)"><!-- --></A><H3>
scrollRowToVisible</H3>
<PRE>
public void <B>scrollRowToVisible</B>(int&nbsp;row)</PRE>
<DL>
<DD>Scrolls vertically to make the given row visible. This might not have any
 effect if the table isn't contained in a <code>JViewport</code>.
 <p>
 
 Note: this method has no precondition as it internally uses
 <code>getCellRect</code> which is lenient to off-range coordinates.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>row</CODE> - the view row index of the cell<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#scrollColumnToVisible(int)"><CODE>scrollColumnToVisible(int)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#scrollCellToVisible(int, int)"><CODE>scrollCellToVisible(int, int)</CODE></A>, 
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComponent.html#scrollRectToVisible(java.awt.Rectangle)" title="class or interface in javax.swing"><CODE>JComponent.scrollRectToVisible(Rectangle)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="scrollColumnToVisible(int)"><!-- --></A><H3>
scrollColumnToVisible</H3>
<PRE>
public void <B>scrollColumnToVisible</B>(int&nbsp;column)</PRE>
<DL>
<DD>Scrolls horizontally to make the given column visible. This might not
 have any effect if the table isn't contained in a <code>JViewport</code>.
 <p>
 
 Note: this method has no precondition as it internally uses
 <code>getCellRect</code> which is lenient to off-range coordinates.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>column</CODE> - the view column index of the cell<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#scrollRowToVisible(int)"><CODE>scrollRowToVisible(int)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#scrollCellToVisible(int, int)"><CODE>scrollCellToVisible(int, int)</CODE></A>, 
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComponent.html#scrollRectToVisible(java.awt.Rectangle)" title="class or interface in javax.swing"><CODE>JComponent.scrollRectToVisible(Rectangle)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="scrollCellToVisible(int, int)"><!-- --></A><H3>
scrollCellToVisible</H3>
<PRE>
public void <B>scrollCellToVisible</B>(int&nbsp;row,
                                int&nbsp;column)</PRE>
<DL>
<DD>Scrolls to make the cell at row and column visible. This might not have
 any effect if the table isn't contained in a <code>JViewport</code>.
 <p>
 
 Note: this method has no precondition as it internally uses
 <code>getCellRect</code> which is lenient to off-range coordinates.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>row</CODE> - the view row index of the cell<DD><CODE>column</CODE> - the view column index of the cell<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#scrollColumnToVisible(int)"><CODE>scrollColumnToVisible(int)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#scrollRowToVisible(int)"><CODE>scrollRowToVisible(int)</CODE></A>, 
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComponent.html#scrollRectToVisible(java.awt.Rectangle)" title="class or interface in javax.swing"><CODE>JComponent.scrollRectToVisible(Rectangle)</CODE></A></DL>
</DD>

</DL>
<HR>

<A NAME="getSelectionMode()"><!-- --></A><H3>
getSelectionMode</H3>
<PRE>
public int <B>getSelectionMode</B>()</PRE>
<DL>
<DD>Returns the selection mode used by this table's selection model.
 <p>
 PENDING JW - setter?
<P>

<DD><DL>

<DT><B>Returns:</B><DD>the selection mode used by this table's selection model<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/ListSelectionModel.html#getSelectionMode()" title="class or interface in javax.swing"><CODE>ListSelectionModel.getSelectionMode()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getSearchable()"><!-- --></A><H3>
getSearchable</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/Searchable.html" title="interface in org.jdesktop.swingx">Searchable</A> <B>getSearchable</B>()</PRE>

<DL>
<DD><DL>

<DT><B>Returns:</B><DD>a not-null Searchable for this editor.</DL>
</DD>
</DL>
<HR>

<A NAME="setSearchable(org.jdesktop.swingx.Searchable)"><!-- --></A><H3>
setSearchable</H3>
<PRE>
public void <B>setSearchable</B>(<A HREF="../../../org/jdesktop/swingx/Searchable.html" title="interface in org.jdesktop.swingx">Searchable</A>&nbsp;searchable)</PRE>

<DL>
<DD>sets the Searchable for this editor. If null, a default 
 searchable will be used.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>searchable</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="getComponentAdapter()"><!-- --></A><H3>
getComponentAdapter</H3>
<PRE>

protected <A HREF="../../../org/jdesktop/swingx/decorator/ComponentAdapter.html" title="class in org.jdesktop.swingx.decorator">ComponentAdapter</A> <B>getComponentAdapter</B>()</PRE>
<DL>
<DD><DL>

<DT><B>Returns:</B><DD>the unconfigured ComponentAdapter.</DL>
</DD>
</DL>
<HR>

<A NAME="getComponentAdapter(int, int)"><!-- --></A><H3>

getComponentAdapter</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/ComponentAdapter.html" title="class in org.jdesktop.swingx.decorator">ComponentAdapter</A> <B>getComponentAdapter</B>(int&nbsp;row,
                                               int&nbsp;column)</PRE>
<DL>
<DD>Convenience to access a configured ComponentAdapter.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>row</CODE> - the row index in view coordinates.<DD><CODE>column</CODE> - the column index in view coordinates.

<DT><B>Returns:</B><DD>the configured ComponentAdapter.</DL>
</DD>
</DL>
<HR>

<A NAME="getHighlighters()"><!-- --></A><H3>
getHighlighters</H3>
<PRE>
public <A HREF="../../../org/jdesktop/swingx/decorator/HighlighterPipeline.html" title="class in org.jdesktop.swingx.decorator">HighlighterPipeline</A> <B>getHighlighters</B>()</PRE>

<DL>
<DD>Returns the HighlighterPipeline assigned to the table, null if none.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the HighlighterPipeline assigned to the table.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setHighlighters(org.jdesktop.swingx.decorator.HighlighterPipeline)"><CODE>setHighlighters(HighlighterPipeline)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setHighlighters(org.jdesktop.swingx.decorator.HighlighterPipeline)"><!-- --></A><H3>
setHighlighters</H3>

<PRE>
public void <B>setHighlighters</B>(<A HREF="../../../org/jdesktop/swingx/decorator/HighlighterPipeline.html" title="class in org.jdesktop.swingx.decorator">HighlighterPipeline</A>&nbsp;pipeline)</PRE>
<DL>
<DD>Assigns a HighlighterPipeline to the table, maybe null to remove all
 Highlighters.<p>
 
 The default value is <code>null</code>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pipeline</CODE> - the HighlighterPipeline to use for renderer decoration.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#getHighlighters()"><CODE>getHighlighters()</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"><CODE>addHighlighter(Highlighter)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"><CODE>removeHighlighter(Highlighter)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"><!-- --></A><H3>
addHighlighter</H3>
<PRE>
public void <B>addHighlighter</B>(<A HREF="../../../org/jdesktop/swingx/decorator/Highlighter.html" title="class in org.jdesktop.swingx.decorator">Highlighter</A>&nbsp;highlighter)</PRE>

<DL>
<DD>Adds a Highlighter.
 <p>
 
 If the <code>HighlighterPipeline</code> returned from getHighlighters()
 is null, creates and sets a new pipeline containing the given
 <code>Highlighter</code>. Else, appends the <code>Highlighter</code>
 to the end of the pipeline.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>highlighter</CODE> - the <code>Highlighter</code> to add.

<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/NullPointerException.html" title="class or interface in java.lang">NullPointerException</A></CODE> - if <code>Highlighter</code> is null.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"><CODE>removeHighlighter(Highlighter)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#setHighlighters(org.jdesktop.swingx.decorator.HighlighterPipeline)"><CODE>setHighlighters(HighlighterPipeline)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"><!-- --></A><H3>
removeHighlighter</H3>
<PRE>
public void <B>removeHighlighter</B>(<A HREF="../../../org/jdesktop/swingx/decorator/Highlighter.html" title="class in org.jdesktop.swingx.decorator">Highlighter</A>&nbsp;highlighter)</PRE>
<DL>
<DD>Removes the Highlighter. <p>
 
 Does nothing if the HighlighterPipeline is null or does not contain
 the given Highlighter.
<P>
<DD><DL>

<DT><B>Parameters:</B><DD><CODE>highlighter</CODE> - the highlighter to remove.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"><CODE>addHighlighter(Highlighter)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#setHighlighters(org.jdesktop.swingx.decorator.HighlighterPipeline)"><CODE>setHighlighters(HighlighterPipeline)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getHighlighterChangeListener()"><!-- --></A><H3>
getHighlighterChangeListener</H3>
<PRE>

protected <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/ChangeListener.html" title="class or interface in javax.swing.event">ChangeListener</A> <B>getHighlighterChangeListener</B>()</PRE>
<DL>
<DD>Returns the <code>ChangeListener</code> to use with highlighters. Lazily 
 creates the listener.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the ChangeListener for observing changes of highlighters, 
   guaranteed to be <code>not-null</code></DL>

</DD>
</DL>
<HR>

<A NAME="createHighlighterChangeListener()"><!-- --></A><H3>
createHighlighterChangeListener</H3>
<PRE>
protected <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/event/ChangeListener.html" title="class or interface in javax.swing.event">ChangeListener</A> <B>createHighlighterChangeListener</B>()</PRE>
<DL>
<DD>Creates and returns the ChangeListener observing Highlighters.
 <p>

 Here: repaints the table on receiving a stateChanged.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the ChangeListener defining the reaction to changes of
         highlighters.</DL>
</DD>
</DL>
<HR>

<A NAME="getCellRenderer(int, int)"><!-- --></A><H3>
getCellRenderer</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableCellRenderer.html" title="class or interface in javax.swing.table">TableCellRenderer</A> <B>getCellRenderer</B>(int&nbsp;row,
                                         int&nbsp;column)</PRE>

<DL>
<DD>Returns an appropriate renderer for the cell specified by this row and
 column. If the <code>TableColumn</code> for this column has a non-null
 renderer, returns that.  If not, finds the class of the data in
 this column (using <code>getColumnClass</code>)
 and returns the default renderer for this type of data.
 <p>
 <b>Note:</b>
 Throughout the table package, the internal implementations always
 use this method to provide renderers so that this default behavior
 can be safely overridden by a subclass.
 <p>
 
 Overridden to fix core bug #4614616 (NPE if <code>TableModel</code>'s
 <code>Class</code> for the column is an interface). This method
 guarantees to always return a <code>not null</code> value. Returns the
 default renderer for <code>Object</code> if super returns
 <code>null</code>.

<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getCellRenderer(int, int)" title="class or interface in javax.swing">getCellRenderer</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>row</CODE> - the row of the cell to render, where 0 is the first row<DD><CODE>column</CODE> - the column of the cell to render,
                        where 0 is the first column

<DT><B>Returns:</B><DD>the assigned renderer; if <code>null</code>
                        returns the default renderer
                        for this type of object<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/DefaultTableCellRenderer.html" title="class or interface in javax.swing.table"><CODE>DefaultTableCellRenderer</CODE></A>, 
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumn.html#setCellRenderer(javax.swing.table.TableCellRenderer)" title="class or interface in javax.swing.table"><CODE>TableColumn.setCellRenderer(javax.swing.table.TableCellRenderer)</CODE></A>, 
<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setDefaultRenderer(java.lang.Class, javax.swing.table.TableCellRenderer)" title="class or interface in javax.swing"><CODE>JTable.setDefaultRenderer(java.lang.Class<?>, javax.swing.table.TableCellRenderer)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="prepareRenderer(javax.swing.table.TableCellRenderer, int, int)"><!-- --></A><H3>
prepareRenderer</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Component.html" title="class or interface in java.awt">Component</A> <B>prepareRenderer</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableCellRenderer.html" title="class or interface in javax.swing.table">TableCellRenderer</A>&nbsp;renderer,
                                 int&nbsp;row,
                                 int&nbsp;column)</PRE>
<DL>
<DD>Returns the decorated <code>Component</code> used as a stamp to render
 the specified cell. Overrides superclass version to provide support for
 cell decorators.
 <p>

 
 Adjusts component orientation (guaranteed to happen before applying
 Highlighters).
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#prepareRenderer(javax.swing.table.TableCellRenderer, int, int)" title="class or interface in javax.swing">prepareRenderer</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>renderer</CODE> - the <code>TableCellRenderer</code> to prepare<DD><CODE>row</CODE> - the row of the cell to render, where 0 is the first row<DD><CODE>column</CODE> - the column of the cell to render, where 0 is the first
        column

<DT><B>Returns:</B><DD>the decorated <code>Component</code> used as a stamp to render
         the specified cell<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/decorator/Highlighter.html" title="class in org.jdesktop.swingx.decorator"><CODE>Highlighter</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="resetDefaultTableCellRendererColors(java.awt.Component, int, int)"><!-- --></A><H3>
resetDefaultTableCellRendererColors</H3>
<PRE>
protected void <B>resetDefaultTableCellRendererColors</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Component.html" title="class or interface in java.awt">Component</A>&nbsp;renderer,
                                                   int&nbsp;row,
                                                   int&nbsp;column)</PRE>

<DL>
<DD>Method to hack around #258-swingx: apply a specialized <code>Highlighter</code>
 to force reset the color "memory" of <code>DefaultTableCellRenderer</code>. 
 This is called for each renderer in <code>prepareRenderer</code> after
 calling super, but before applying the HighlighterPipeline. Subclasses
 which are sure to solve the problem at the core (that is in 
 a well-behaved DefaultTableCellRenderer) should override this method
 to do nothing.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>renderer</CODE> - the <code>TableCellRenderer</code> to hack<DD><CODE>row</CODE> - the row of the cell to render<DD><CODE>column</CODE> - the column index of the cell to render<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/decorator/ResetDTCRColorHighlighter.html" title="class in org.jdesktop.swingx.decorator"><CODE>ResetDTCRColorHighlighter</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#prepareRenderer(javax.swing.table.TableCellRenderer, int, int)"><CODE>prepareRenderer(TableCellRenderer, int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="prepareEditor(javax.swing.table.TableCellEditor, int, int)"><!-- --></A><H3>
prepareEditor</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Component.html" title="class or interface in java.awt">Component</A> <B>prepareEditor</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableCellEditor.html" title="class or interface in javax.swing.table">TableCellEditor</A>&nbsp;editor,
                               int&nbsp;row,
                               int&nbsp;column)</PRE>

<DL>
<DD>Prepares the editor by querying the data model for the value and
 selection state of the cell at <code>row</code>, <code>column</code>.
 <p>
 <b>Note:</b>
 Throughout the table package, the internal implementations always
 use this method to prepare editors so that this default behavior
 can be safely overridden by a subclass. <p>
 
 Overridden to adjust the editor's component orientation.
<P>
<DD><DL>

<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#prepareEditor(javax.swing.table.TableCellEditor, int, int)" title="class or interface in javax.swing">prepareEditor</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>editor</CODE> - the <code>TableCellEditor</code> to set up<DD><CODE>row</CODE> - the row of the cell to edit,
                      where 0 is the first row<DD><CODE>column</CODE> - the column of the cell to edit,
                      where 0 is the first column

<DT><B>Returns:</B><DD>the <code>Component</code> being edited</DL>
</DD>
</DL>
<HR>

<A NAME="adjustComponentOrientation(java.awt.Component)"><!-- --></A><H3>
adjustComponentOrientation</H3>
<PRE>
protected void <B>adjustComponentOrientation</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Component.html" title="class or interface in java.awt">Component</A>&nbsp;stamp)</PRE>

<DL>
<DD>Adjusts the <code>Component</code>'s orientation to this
 <code>JXTable</code>'s CO if appropriate. The parameter must not be
 <code>null</code>.
 <p>
 
 This implementation synchs the CO always.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>stamp</CODE> - the <code>Component</code> who's CO may need to be synched, 
    must not be <code>null</code>.</DL>

</DD>
</DL>
<HR>

<A NAME="getNewDefaultRenderer(java.lang.Class)"><!-- --></A><H3>
getNewDefaultRenderer</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableCellRenderer.html" title="class or interface in javax.swing.table">TableCellRenderer</A> <B>getNewDefaultRenderer</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Class.html" title="class or interface in java.lang">Class</A>&nbsp;columnClass)</PRE>
<DL>

<DD>Returns a new instance of the default renderer for the specified class.
 This differs from <code>getDefaultRenderer()</code> in that it returns
 a <b>new </b> instance each time so that the renderer may be set and
 customized on a particular column.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>columnClass</CODE> - Class of value being rendered
<DT><B>Returns:</B><DD>TableCellRenderer instance which renders values of the specified
         type<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#getDefaultRenderer(java.lang.Class)" title="class or interface in javax.swing"><CODE>JTable.getDefaultRenderer(Class)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="createDefaultRenderers()"><!-- --></A><H3>
createDefaultRenderers</H3>
<PRE>
protected void <B>createDefaultRenderers</B>()</PRE>
<DL>
<DD>Creates default cell renderers for objects, numbers, doubles, dates,
 booleans, and icons.
 <p>
 Overridden so we can act as factory for renderers plus hacking around
 huge memory consumption of UIDefaults (see #6345050 in core Bug parade)
 <p>

 Creates default cell renderers for objects, numbers, doubles, dates,
 booleans, and icons.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#createDefaultRenderers()" title="class or interface in javax.swing">createDefaultRenderers</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/DefaultTableCellRenderer.html" title="class or interface in javax.swing.table"><CODE>DefaultTableCellRenderer</CODE></A></DL>
</DD>
</DL>

<HR>

<A NAME="createDefaultEditors()"><!-- --></A><H3>
createDefaultEditors</H3>
<PRE>
protected void <B>createDefaultEditors</B>()</PRE>
<DL>
<DD>Creates default cell editors for objects, numbers, and boolean values.
 <p>
 Overridden to hook enhanced editors plus hacking around
 huge memory consumption of UIDefaults (see #6345050 in core Bug parade)
<P>
<DD><DL>

<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#createDefaultEditors()" title="class or interface in javax.swing">createDefaultEditors</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/DefaultCellEditor.html" title="class or interface in javax.swing"><CODE>DefaultCellEditor</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isEditable()"><!-- --></A><H3>
isEditable</H3>

<PRE>
public boolean <B>isEditable</B>()</PRE>
<DL>
<DD>Returns the editable property of the <code>JXTable</code> as a whole.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>boolean to indicate if the table is editable.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setEditable(boolean)"><CODE>setEditable(boolean)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="setEditable(boolean)"><!-- --></A><H3>
setEditable</H3>
<PRE>
public void <B>setEditable</B>(boolean&nbsp;editable)</PRE>
<DL>
<DD>Sets the editable property. This property allows to mark all cells in a
 table as read-only, independent of their per-column editability as
 returned by <code>TableColumnExt.isEditable</code> and their per-cell
 editability as returned by the <code>TableModel.isCellEditable</code>.
 If a cell is read-only in its column or model layer, this property has no
 effect.
 <p>

 
 The default value is <code>true</code>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>editable</CODE> - the flag to indicate if the table is editable.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isEditable()"><CODE>isEditable()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#isCellEditable(int, int)"><CODE>isCellEditable(int, int)</CODE></A></DL>
</DD>
</DL>

<HR>

<A NAME="isTerminateEditOnFocusLost()"><!-- --></A><H3>
isTerminateEditOnFocusLost</H3>
<PRE>
public boolean <B>isTerminateEditOnFocusLost</B>()</PRE>
<DL>
<DD>Returns the property which determines the edit termination behaviour on
 focus lost.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>boolean to indicate whether an ongoing edit should be terminated
         if the focus is moved to somewhere outside of the table.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setTerminateEditOnFocusLost(boolean)"><CODE>setTerminateEditOnFocusLost(boolean)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="setTerminateEditOnFocusLost(boolean)"><!-- --></A><H3>
setTerminateEditOnFocusLost</H3>
<PRE>
public void <B>setTerminateEditOnFocusLost</B>(boolean&nbsp;terminate)</PRE>
<DL>
<DD>Sets the property to determine whether an ongoing edit should be
 terminated if the focus is moved to somewhere outside of the table. If
 true, terminates the edit, does nothing otherwise. The exact behaviour is
 implemented in <code>JTable.CellEditorRemover</code>: "outside" is
 interpreted to be on a component which is not under the table hierarchy
 but inside the same toplevel window, "terminate" does so in any case,
 first tries to stop the edit, if that's unsuccessful it cancels the edit.
 <p>

 The default value is <code>true</code>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>terminate</CODE> - the flag to determine whether or not to terminate the
        edit<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isTerminateEditOnFocusLost()"><CODE>isTerminateEditOnFocusLost()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isAutoStartEditOnKeyStroke()"><!-- --></A><H3>
isAutoStartEditOnKeyStroke</H3>
<PRE>
public boolean <B>isAutoStartEditOnKeyStroke</B>()</PRE>
<DL>
<DD>Returns the autoStartsEdit property.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>boolean to indicate whether a keyStroke should try to start
         editing.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setAutoStartEditOnKeyStroke(boolean)"><CODE>setAutoStartEditOnKeyStroke(boolean)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="setAutoStartEditOnKeyStroke(boolean)"><!-- --></A><H3>
setAutoStartEditOnKeyStroke</H3>
<PRE>
public void <B>setAutoStartEditOnKeyStroke</B>(boolean&nbsp;autoStart)</PRE>
<DL>
<DD>Sets the autoStartsEdit property. If true, keystrokes are passed-on to
 the cellEditor of the lead cell to let it decide whether to start an
 edit.
 <p>
 The default value is <code>true</code>.
 <p>

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>autoStart</CODE> - boolean to determine whether a keyStroke should try to
        start editing.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isAutoStartEditOnKeyStroke()"><CODE>isAutoStartEditOnKeyStroke()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="updateUI()"><!-- --></A><H3>
updateUI</H3>
<PRE>

public void <B>updateUI</B>()</PRE>
<DL>
<DD>Notification from the <code>UIManager</code> that the L&F has changed.
 Replaces the current UI object with the latest version from the
 <code>UIManager</code>.
 <p>
 Additionally updates auto-adjusted row height and highlighters.
 <p>

 Another of the override motivation is to fix core issue (?? ID): super
 fails to update <b>all</b> renderers/editors.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#updateUI()" title="class or interface in javax.swing">updateUI</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComponent.html#updateUI()" title="class or interface in javax.swing"><CODE>JComponent.updateUI()</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="updateHighlighterUI()"><!-- --></A><H3>
updateHighlighterUI</H3>
<PRE>
protected void <B>updateHighlighterUI</B>()</PRE>
<DL>
<DD>Updates highlighter after <code>updateUI</code> changes.

<P>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/decorator/Highlighter.UIHighlighter.html" title="interface in org.jdesktop.swingx.decorator"><CODE>Highlighter.UIHighlighter</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="updateRowHeightUI(boolean)"><!-- --></A><H3>
updateRowHeightUI</H3>
<PRE>
protected void <B>updateRowHeightUI</B>(boolean&nbsp;respectRowSetFlag)</PRE>

<DL>
<DD>Auto-adjusts rowHeight to something more pleasing then the default. This
 method is called after instantiation and after updating the UI. Does
 nothing if the given parameter is <code>true</code> and the rowHeight
 had been already set by client code. The underlying problem is that raw
 types can't implement UIResource.
 <p>
 This implementation asks the UIManager for a default value (stored with
 key "JXTable.rowHeight"). If none is available, calculates a "reasonable"
 height from the table's fontMetrics, assuming that most renderers/editors
 will have a border with top/bottom of 1.
 <p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>respectRowSetFlag</CODE> - a boolean to indicate whether client-code flag
        should be respected.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isXTableRowHeightSet"><CODE>isXTableRowHeightSet</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="setDefaultMargins(boolean, boolean)"><!-- --></A><H3>
setDefaultMargins</H3>
<PRE>
public void <B>setDefaultMargins</B>(boolean&nbsp;showHorizontalLines,
                              boolean&nbsp;showVerticalLines)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>replaced by {@link #setShowGrid(boolean, boolean).</I>

<P>
<DD>Convenience to set both grid line visibility and default margin for
 horizontal/vertical lines. The margin defaults to 1 or 0 if the grid
 lines are drawn or not drawn.
 <p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>showHorizontalLines</CODE> - boolean to decide whether to draw horizontal
        grid lines.<DD><CODE>showVerticalLines</CODE> - boolean to decide whether to draw vertical grid
        lines.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowGrid(boolean, boolean)"><!-- --></A><H3>
setShowGrid</H3>
<PRE>
public void <B>setShowGrid</B>(boolean&nbsp;showHorizontalLines,
                        boolean&nbsp;showVerticalLines)</PRE>
<DL>
<DD>Convenience to set both grid line visibility and default margin for
 horizontal/vertical lines. The margin defaults to 1 or 0 if the grid
 lines are drawn or not drawn.
 <p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>showHorizontalLines</CODE> - boolean to decide whether to draw horizontal
        grid lines.<DD><CODE>showVerticalLines</CODE> - boolean to decide whether to draw vertical grid
        lines.<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setShowGrid(boolean)" title="class or interface in javax.swing"><CODE>JTable.setShowGrid(boolean)</CODE></A>, 

<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setIntercellSpacing(java.awt.Dimension)" title="class or interface in javax.swing"><CODE>JTable.setIntercellSpacing(Dimension)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setRowHeight(int)"><!-- --></A><H3>
setRowHeight</H3>
<PRE>
public void <B>setRowHeight</B>(int&nbsp;rowHeight)</PRE>
<DL>
<DD>Sets the height, in pixels, of all cells to <code>rowHeight</code>,
 revalidates, and repaints.
 The height of the cells will be equal to the row height minus
 the row margin.
 <p>

 Overriden to keep view/model coordinates of SizeSequence in synch. Marks
 the request as client-code induced.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setRowHeight(int)" title="class or interface in javax.swing">setRowHeight</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rowHeight</CODE> - new row height<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isXTableRowHeightSet"><CODE>isXTableRowHeightSet</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="setRowHeight(int, int)"><!-- --></A><H3>
setRowHeight</H3>
<PRE>
public void <B>setRowHeight</B>(int&nbsp;row,
                         int&nbsp;rowHeight)</PRE>
<DL>
<DD>Sets the height for <code>row</code> to <code>rowHeight</code>,
 revalidates, and repaints. The height of the cells in this row
 will be equal to the row height minus the row margin.
 <p>

 Does nothing if support of individual rowHeights is not enabled.
 Overriden to keep view/model coordinates of SizeSequence in synch.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#setRowHeight(int, int)" title="class or interface in javax.swing">setRowHeight</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>row</CODE> - the row whose height is being
                                                changed<DD><CODE>rowHeight</CODE> - new row height, in pixels<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isRowHeightEnabled()"><CODE>isRowHeightEnabled()</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="setRowHeightEnabled(boolean)"><!-- --></A><H3>
setRowHeightEnabled</H3>
<PRE>
public void <B>setRowHeightEnabled</B>(boolean&nbsp;enabled)</PRE>
<DL>
<DD>Sets enablement of individual rowHeight support. Enabling the support
 involves reflective access to super's private field rowModel which may
 fail due to security issues. If failing the support is not enabled.
 <p>
 The default value is <code>false</code>.

<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>enabled</CODE> - a boolean to indicate whether per-row heights should be
        enabled.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#isRowHeightEnabled()"><CODE>isRowHeightEnabled()</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#setRowHeight(int, int)"><CODE>setRowHeight(int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isRowHeightEnabled()"><!-- --></A><H3>
isRowHeightEnabled</H3>

<PRE>
public boolean <B>isRowHeightEnabled</B>()</PRE>
<DL>
<DD>Returns a boolean to indicate whether individual row height is enabled.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a boolean to indicate whether individual row height support is
         enabled.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setRowHeightEnabled(boolean)"><CODE>setRowHeightEnabled(boolean)</CODE></A>, 
<A HREF="../../../org/jdesktop/swingx/JXTable.html#setRowHeight(int, int)"><CODE>setRowHeight(int, int)</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="getRowModelMapper()"><!-- --></A><H3>
getRowModelMapper</H3>
<PRE>
protected <A HREF="../../../org/jdesktop/swingx/decorator/SizeSequenceMapper.html" title="class in org.jdesktop.swingx.decorator">SizeSequenceMapper</A> <B>getRowModelMapper</B>()</PRE>
<DL>
<DD>Returns the mapper used synch individual rowHeights in view/model
 coordinates.
<P>

<DD><DL>

<DT><B>Returns:</B><DD>the <code>SizeSequenceMapper</code> used to synch view/model
         coordinates for individual row heights<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/decorator/SizeSequenceMapper.html" title="class in org.jdesktop.swingx.decorator"><CODE>SizeSequenceMapper</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="adminSetRowHeight(int)"><!-- --></A><H3>
adminSetRowHeight</H3>

<PRE>
protected void <B>adminSetRowHeight</B>(int&nbsp;rowHeight)</PRE>
<DL>
<DD>Sets the rowHeight for all rows to the given value. Keeps the flag
 <code>isXTableRowHeight</code> unchanged. This enables the distinction
 between setting the height for internal reasons from doing so by client
 code.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rowHeight</CODE> - new height in pixel.<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTable.html#setRowHeight(int)"><CODE>setRowHeight(int)</CODE></A>, 

<A HREF="../../../org/jdesktop/swingx/JXTable.html#isXTableRowHeightSet"><CODE>isXTableRowHeightSet</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="rowAtPoint(java.awt.Point)"><!-- --></A><H3>
rowAtPoint</H3>
<PRE>
public int <B>rowAtPoint</B>(<A HREF="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Point.html" title="class or interface in java.awt">Point</A>&nbsp;point)</PRE>
<DL>

<DD>Returns the index of the row that <code>point</code> lies in,
 or -1 if the result is not in the range
 [0, <code>getRowCount()</code>-1].
 <p>
 Overridden to work around core Bug (ID #6291631): negative y is mapped to
 row 0).
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#rowAtPoint(java.awt.Point)" title="class or interface in javax.swing">rowAtPoint</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>

</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>point</CODE> - the location of interest
<DT><B>Returns:</B><DD>the index of the row that <code>point</code> lies in,
          or -1 if the result is not in the range
          [0, <code>getRowCount()</code>-1]<DT><B>See Also:</B><DD><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#columnAtPoint(java.awt.Point)" title="class or interface in javax.swing"><CODE>JTable.columnAtPoint(java.awt.Point)</CODE></A></DL>
</DD>

</DL>
<HR>

<A NAME="createDefaultTableHeader()"><!-- --></A><H3>
createDefaultTableHeader</H3>
<PRE>
protected <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/JTableHeader.html" title="class or interface in javax.swing.table">JTableHeader</A> <B>createDefaultTableHeader</B>()</PRE>
<DL>
<DD>Returns the default table header object, which is
 a <code>JTableHeader</code>.  A subclass can override this
 method to return a different table header object.
 <p>

 
 Overridden to return a <code>JXTableHeader</code>.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#createDefaultTableHeader()" title="class or interface in javax.swing">createDefaultTableHeader</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the default table header object<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/JXTableHeader.html" title="class in org.jdesktop.swingx"><CODE>JXTableHeader</CODE></A></DL>

</DD>
</DL>
<HR>

<A NAME="createDefaultColumnModel()"><!-- --></A><H3>
createDefaultColumnModel</H3>
<PRE>
protected <A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableColumnModel.html" title="class or interface in javax.swing.table">TableColumnModel</A> <B>createDefaultColumnModel</B>()</PRE>
<DL>
<DD>Returns the default column model object, which is
 a <code>DefaultTableColumnModel</code>.  A subclass can override this
 method to return a different column model object.
 <p>

 
 Overridden to return a <code>DefaultTableColumnModelExt</code>.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html#createDefaultColumnModel()" title="class or interface in javax.swing">createDefaultColumnModel</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html" title="class or interface in javax.swing">JTable</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the default column model object<DT><B>See Also:</B><DD><A HREF="../../../org/jdesktop/swingx/table/DefaultTableColumnModelExt.html" title="class in org.jdesktop.swingx.table"><CODE>DefaultTableColumnModelExt</CODE></A></DL>

</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>

  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/JXTable.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>

  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/jdesktop/swingx/JXStatusBar.Constraint.ResizeBehavior.html" title="enum in org.jdesktop.swingx"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/jdesktop/swingx/JXTable.BooleanEditor.html" title="class in org.jdesktop.swingx"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/jdesktop/swingx/JXTable.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JXTable.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>

  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>

<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>